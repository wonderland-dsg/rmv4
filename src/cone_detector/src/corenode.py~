#!/usr/bin/env python
import roslib

import rospy


from cone_detector.msg import positionFromDetectRGB as pfdg

class corenode:
    def __init__(self,pub):
        self.pub=pub
    def callback(self,data):
        
        p=pfdg()
        p.who=data.who
        p.x=int(100*120*(data.x-960*0.5)/(1920.0*0.5))
        p.y=int(100*100*(data.y-540*0.5)/(1080.0*0.5))
        #p.y=data.y
        p.z=data.z
        p.flag=p.flag
        self.pub.publish(p)
	rospy.loginfo(rospy.get_caller_id()+"coreNode heard (%d,%f,%f,%f,%d)",data.who,p.x,p.y,data.z,data.flag)

    def listener(self):
        rospy.Subscriber('positionOfRGB',pfdg,self.callback)
        rospy.spin()

if __name__ =='__main__':
    roslib.load_manifest('cone_detector')
    rospy.init_node('corenode',anonymous=True)
    pub = rospy.Publisher('positionOfGimbal', pfdg)
    core=corenode(pub)
    core.listener()
